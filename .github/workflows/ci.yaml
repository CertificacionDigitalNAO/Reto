name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Clona el repositorio en el entorno de ejecución

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
        # Configura Node.js en el entorno de ejecución

      - name: Install dependencies
        run: npm install
        # Instala las dependencias del proyecto

      - name: Set up environment variables
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        # Configura las variables de entorno necesarias

      - name: Build the project
        run: npm run build
        # Construye el proyecto

      - name: Run unit tests
        run: npm run test
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        # Ejecuta las pruebas unitarias

      - name: Build Docker image
        run: docker build -t my-app:latest .
        # Construye la imagen Docker

      - name: Save Docker image to file
        run: docker save my-app:latest -o my-app-latest.tar
        # Guarda la imagen Docker en un archivo tar

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: my-app-latest.tar
          key: ${{ runner.os }}-my-app-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-my-app-
        # Almacena el archivo tar en la caché

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # Clona el repositorio en el entorno de ejecución

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
        # Configura Node.js en el entorno de ejecución

      - name: Restore Docker image from cache
        uses: actions/cache@v3
        with:
          path: my-app-latest.tar
          key: ${{ runner.os }}-my-app-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-my-app-
        # Restaura el archivo tar desde la caché

      - name: Load Docker image from file
        run: docker load -i my-app-latest.tar
        # Carga la imagen Docker desde el archivo tar

      - name: Run Docker container
        run: docker run -d -p 3000:3000 --name my-app-container my-app:latest
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        # Ejecuta el contenedor Docker

      - name: Install dev dependencies for e2e tests
        run: docker exec my-app-container npm install --only=dev
        # Instala las dependencias de desarrollo necesarias para las pruebas e2e

      - name: Run e2e tests
        run: docker exec my-app-container npm run test:e2e
        # Ejecuta las pruebas de extremo a extremo dentro del contenedor

      - name: Remove dev dependencies after e2e tests
        run: docker exec my-app-container npm prune --production
        # Elimina las dependencias de desarrollo después de las pruebas

      - name: Stop and remove Docker container
        run: docker stop my-app-container && docker rm my-app-container
        # Detiene y elimina el contenedor Docker