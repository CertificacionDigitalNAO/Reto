name: CI/CD Pipeline # Nombre del pipeline

on:
  push:
    branches:
      - main # Ejecuta el pipeline en cada push a la rama 'main'
  pull_request:
    branches:
      - main # Ejecuta el pipeline en cada pull request a la rama 'main'

jobs:
  build:
    runs-on: ubuntu-latest # Utiliza la última versión de Ubuntu como entorno de ejecución

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Clona el repositorio en el entorno de ejecución

      - name: Set up Node.js
        uses: actions/setup-node@v3 # Configura Node.js en el entorno de ejecución
        with:
          node-version: '20' # Especifica la versión de Node.js a usar

      - name: Install dependencies
        run: npm install # Instala las dependencias del proyecto

      - name: Set up environment variables
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        # Configura las variables de entorno necesarias

      - name: Build the project
        run: npm run build # Construye el proyecto

      - name: Run unit tests
        run: npm run test # Ejecuta las pruebas unitarias
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }} # Pasa la variable de entorno MONGODB_URI a las pruebas
          JWT_SECRET: ${{ secrets.JWT_SECRET }} # Pasa la variable de entorno JWT_SECRET a las pruebas

      - name: Build Docker image
        run: docker build -t my-app:latest . # Construye la imagen Docker

      - name: Save Docker image to file
        run: docker save my-app:latest -o my-app-latest.tar # Guarda la imagen Docker en un archivo tar

      - name: Cache Docker image
        uses: actions/cache@v3 # Utiliza la acción de caché para almacenar el archivo tar
        with:
          path: my-app-latest.tar # Especifica el archivo tar a almacenar
          key: ${{ runner.os }}-my-app-${{ github.sha }} # Genera una clave única para la caché basada en el sistema operativo y el SHA del commit
          restore-keys: |
            ${{ runner.os }}-my-app- # Claves de restauración para la caché

  e2e-tests:
    runs-on: ubuntu-latest # Utiliza la última versión de Ubuntu como entorno de ejecución
    needs: build # Este trabajo depende del trabajo de construcción

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Clona el repositorio en el entorno de ejecución

      - name: Set up Node.js
        uses: actions/setup-node@v3 # Configura Node.js en el entorno de ejecución
        with:
          node-version: '20' # Especifica la versión de Node.js a usar

      - name: Restore Docker image from cache
        uses: actions/cache@v3 # Utiliza la acción de caché para restaurar el archivo tar
        with:
          path: my-app-latest.tar # Especifica el archivo tar a restaurar
          key: ${{ runner.os }}-my-app-${{ github.sha }} # Genera una clave única para la caché basada en el sistema operativo y el SHA del commit
          restore-keys: |
            ${{ runner.os }}-my-app- # Claves de restauración para la caché

      - name: Load Docker image from file
        run: docker load -i my-app-latest.tar # Carga la imagen Docker desde el archivo tar

      - name: Run Docker container
        run: docker run -d -p 3000:3000 --name my-app-container my-app:latest # Ejecuta el contenedor Docker
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }} # Pasa la variable de entorno MONGODB_URI al contenedor
          JWT_SECRET: ${{ secrets.JWT_SECRET }} # Pasa la variable de entorno JWT_SECRET al contenedor

      - name: Install dev dependencies for e2e tests
        run: docker exec my-app-container npm install --only=dev # Instala las dependencias de desarrollo necesarias para las pruebas e2e

      - name: Run e2e tests
        run: docker exec my-app-container npm run test:e2e # Ejecuta las pruebas de extremo a extremo dentro del contenedor

      - name: Remove dev dependencies after e2e tests
        run: docker exec my-app-container npm prune --production # Elimina las dependencias de desarrollo después de las pruebas

      - name: Stop and remove Docker container
        run: docker stop my-app-container && docker rm my-app-container # Detiene y elimina el contenedor Docker

  deploy:
    runs-on: ubuntu-latest # Utiliza la última versión de Ubuntu como entorno de ejecución
    needs: e2e-tests # Este trabajo depende del trabajo de pruebas e2e

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Clona el repositorio en el entorno de ejecución

      - name: Login to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }} # Utiliza la clave API de Render almacenada en los secretos
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}", "clearCache": true}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
        # Despliega la aplicación en Render