name: CI/CD Pipeline # Nombre del pipeline

on:
  push:
    branches:
      - main # Ejecutar el pipeline en cada push a la rama 'main'
  pull_request:
    branches:
      - main # Ejecutar el pipeline en cada pull request a la rama 'main'

jobs:
  build:
    runs-on: ubuntu-latest # Usar la última versión de Ubuntu como entorno de ejecución

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Clonar el repositorio en el entorno de ejecución

      - name: Set up Node.js
        uses: actions/setup-node@v3 # Configurar Node.js en el entorno de ejecución
        with:
          node-version: '20' # Especificar la versión de Node.js a usar

      - name: Install dependencies
        run: npm install # Instalar las dependencias del proyecto

      - name: Set up environment variables
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
      # Configurar la variable de entorno MONGODB_URI
      # Configurar la variable de entorno JWT_SECRET

      - name: Build the project
        run: npm run build # Construir el proyecto

      - name: Run unit tests
        run: npm run test # Ejecutar las pruebas unitarias
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }} # Pasar la variable de entorno MONGODB_URI a las pruebas
          JWT_SECRET: ${{ secrets.JWT_SECRET }} # Pasar la variable de entorno JWT_SECRET a las pruebas

      - name: Build Docker image
        run: docker build -t my-app:latest . # Construir la imagen de Docker

      - name: Run Docker container
        run: docker run -d -p 3000:3000 --name my-app-container my-app:latest # Ejecutar el contenedor de Docker
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }} # Pasar la variable de entorno MONGODB_URI al contenedor
          JWT_SECRET: ${{ secrets.JWT_SECRET }} # Pasar la variable de entorno JWT_SECRET al contenedor

      - name: Run e2e tests
        run: docker exec my-app-container npm run test:e2e # Ejecutar las pruebas de extremo a extremo dentro del contenedor

      - name: Stop and remove Docker container
        run: docker stop my-app-container && docker rm my-app-container # Detener y eliminar el contenedor de Docker